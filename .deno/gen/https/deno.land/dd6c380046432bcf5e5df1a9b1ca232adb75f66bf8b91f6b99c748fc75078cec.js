// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
import { ts } from "./mod.deps.ts";
// transform `import.meta.url` to a replacement that works in script modules
export const transformImportMeta = (context)=>{
    const factory = context.factory;
    return (sourceFile)=>ts.visitEachChild(sourceFile, visitNode, context);
    function visitNode(node) {
        // find `import.meta.url`
        if (ts.isPropertyAccessExpression(node) && ts.isMetaProperty(node.expression) && node.expression.keywordToken === ts.SyntaxKind.ImportKeyword && ts.isIdentifier(node.name)) {
            if (node.name.escapedText === "url") {
                return getReplacementImportMetaUrl();
            } else if (node.name.escapedText === "main") {
                return getReplacementImportMetaMain();
            }
        }
        return ts.visitEachChild(node, visitNode, context);
    }
    function getReplacementImportMetaUrl() {
        // Copy and pasted from ts-ast-viewer.com
        // require("url").pathToFileURL(__filename).href
        return factory.createPropertyAccessExpression(factory.createCallExpression(factory.createPropertyAccessExpression(factory.createCallExpression(factory.createIdentifier("require"), undefined, [
            factory.createStringLiteral("url")
        ]), factory.createIdentifier("pathToFileURL")), undefined, [
            factory.createIdentifier("__filename")
        ]), factory.createIdentifier("href"));
    }
    function getReplacementImportMetaMain() {
        // Copy and pasted from ts-ast-viewer.com
        // (require.main === module)
        return factory.createParenthesizedExpression(factory.createBinaryExpression(factory.createPropertyAccessExpression(factory.createIdentifier("require"), factory.createIdentifier("main")), factory.createToken(ts.SyntaxKind.EqualsEqualsEqualsToken), factory.createIdentifier("module")));
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvZG50QDAuMzMuMS9saWIvY29tcGlsZXJfdHJhbnNmb3Jtcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIzIHRoZSBEZW5vIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBsaWNlbnNlLlxuXG5pbXBvcnQgeyB0cyB9IGZyb20gXCIuL21vZC5kZXBzLnRzXCI7XG5cbi8vIHRyYW5zZm9ybSBgaW1wb3J0Lm1ldGEudXJsYCB0byBhIHJlcGxhY2VtZW50IHRoYXQgd29ya3MgaW4gc2NyaXB0IG1vZHVsZXNcbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1JbXBvcnRNZXRhOiB0cy5UcmFuc2Zvcm1lckZhY3Rvcnk8dHMuU291cmNlRmlsZT4gPSAoXG4gIGNvbnRleHQsXG4pID0+IHtcbiAgY29uc3QgZmFjdG9yeSA9IGNvbnRleHQuZmFjdG9yeTtcblxuICByZXR1cm4gKHNvdXJjZUZpbGUpID0+IHRzLnZpc2l0RWFjaENoaWxkKHNvdXJjZUZpbGUsIHZpc2l0Tm9kZSwgY29udGV4dCk7XG5cbiAgZnVuY3Rpb24gdmlzaXROb2RlKG5vZGU6IHRzLk5vZGUpOiB0cy5Ob2RlIHtcbiAgICAvLyBmaW5kIGBpbXBvcnQubWV0YS51cmxgXG4gICAgaWYgKFxuICAgICAgdHMuaXNQcm9wZXJ0eUFjY2Vzc0V4cHJlc3Npb24obm9kZSkgJiZcbiAgICAgIHRzLmlzTWV0YVByb3BlcnR5KG5vZGUuZXhwcmVzc2lvbikgJiZcbiAgICAgIG5vZGUuZXhwcmVzc2lvbi5rZXl3b3JkVG9rZW4gPT09IHRzLlN5bnRheEtpbmQuSW1wb3J0S2V5d29yZCAmJlxuICAgICAgdHMuaXNJZGVudGlmaWVyKG5vZGUubmFtZSlcbiAgICApIHtcbiAgICAgIGlmIChub2RlLm5hbWUuZXNjYXBlZFRleHQgPT09IFwidXJsXCIpIHtcbiAgICAgICAgcmV0dXJuIGdldFJlcGxhY2VtZW50SW1wb3J0TWV0YVVybCgpO1xuICAgICAgfSBlbHNlIGlmIChub2RlLm5hbWUuZXNjYXBlZFRleHQgPT09IFwibWFpblwiKSB7XG4gICAgICAgIHJldHVybiBnZXRSZXBsYWNlbWVudEltcG9ydE1ldGFNYWluKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRzLnZpc2l0RWFjaENoaWxkKG5vZGUsIHZpc2l0Tm9kZSwgY29udGV4dCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRSZXBsYWNlbWVudEltcG9ydE1ldGFVcmwoKSB7XG4gICAgLy8gQ29weSBhbmQgcGFzdGVkIGZyb20gdHMtYXN0LXZpZXdlci5jb21cbiAgICAvLyByZXF1aXJlKFwidXJsXCIpLnBhdGhUb0ZpbGVVUkwoX19maWxlbmFtZSkuaHJlZlxuICAgIHJldHVybiBmYWN0b3J5LmNyZWF0ZVByb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihcbiAgICAgIGZhY3RvcnkuY3JlYXRlQ2FsbEV4cHJlc3Npb24oXG4gICAgICAgIGZhY3RvcnkuY3JlYXRlUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKFxuICAgICAgICAgIGZhY3RvcnkuY3JlYXRlQ2FsbEV4cHJlc3Npb24oXG4gICAgICAgICAgICBmYWN0b3J5LmNyZWF0ZUlkZW50aWZpZXIoXCJyZXF1aXJlXCIpLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgW2ZhY3RvcnkuY3JlYXRlU3RyaW5nTGl0ZXJhbChcInVybFwiKV0sXG4gICAgICAgICAgKSxcbiAgICAgICAgICBmYWN0b3J5LmNyZWF0ZUlkZW50aWZpZXIoXCJwYXRoVG9GaWxlVVJMXCIpLFxuICAgICAgICApLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIFtmYWN0b3J5LmNyZWF0ZUlkZW50aWZpZXIoXCJfX2ZpbGVuYW1lXCIpXSxcbiAgICAgICksXG4gICAgICBmYWN0b3J5LmNyZWF0ZUlkZW50aWZpZXIoXCJocmVmXCIpLFxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRSZXBsYWNlbWVudEltcG9ydE1ldGFNYWluKCkge1xuICAgIC8vIENvcHkgYW5kIHBhc3RlZCBmcm9tIHRzLWFzdC12aWV3ZXIuY29tXG4gICAgLy8gKHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlKVxuICAgIHJldHVybiBmYWN0b3J5LmNyZWF0ZVBhcmVudGhlc2l6ZWRFeHByZXNzaW9uKGZhY3RvcnkuY3JlYXRlQmluYXJ5RXhwcmVzc2lvbihcbiAgICAgIGZhY3RvcnkuY3JlYXRlUHJvcGVydHlBY2Nlc3NFeHByZXNzaW9uKFxuICAgICAgICBmYWN0b3J5LmNyZWF0ZUlkZW50aWZpZXIoXCJyZXF1aXJlXCIpLFxuICAgICAgICBmYWN0b3J5LmNyZWF0ZUlkZW50aWZpZXIoXCJtYWluXCIpLFxuICAgICAgKSxcbiAgICAgIGZhY3RvcnkuY3JlYXRlVG9rZW4odHMuU3ludGF4S2luZC5FcXVhbHNFcXVhbHNFcXVhbHNUb2tlbiksXG4gICAgICBmYWN0b3J5LmNyZWF0ZUlkZW50aWZpZXIoXCJtb2R1bGVcIiksXG4gICAgKSk7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEVBQTBFO0FBRTFFLFNBQVMsRUFBRSxRQUFRLGdCQUFnQjtBQUVuQyw0RUFBNEU7QUFDNUUsT0FBTyxNQUFNLHNCQUE0RCxDQUN2RSxVQUNHO0lBQ0gsTUFBTSxVQUFVLFFBQVEsT0FBTztJQUUvQixPQUFPLENBQUMsYUFBZSxHQUFHLGNBQWMsQ0FBQyxZQUFZLFdBQVc7SUFFaEUsU0FBUyxVQUFVLElBQWEsRUFBVztRQUN6Qyx5QkFBeUI7UUFDekIsSUFDRSxHQUFHLDBCQUEwQixDQUFDLFNBQzlCLEdBQUcsY0FBYyxDQUFDLEtBQUssVUFBVSxLQUNqQyxLQUFLLFVBQVUsQ0FBQyxZQUFZLEtBQUssR0FBRyxVQUFVLENBQUMsYUFBYSxJQUM1RCxHQUFHLFlBQVksQ0FBQyxLQUFLLElBQUksR0FDekI7WUFDQSxJQUFJLEtBQUssSUFBSSxDQUFDLFdBQVcsS0FBSyxPQUFPO2dCQUNuQyxPQUFPO1lBQ1QsT0FBTyxJQUFJLEtBQUssSUFBSSxDQUFDLFdBQVcsS0FBSyxRQUFRO2dCQUMzQyxPQUFPO1lBQ1QsQ0FBQztRQUNILENBQUM7UUFFRCxPQUFPLEdBQUcsY0FBYyxDQUFDLE1BQU0sV0FBVztJQUM1QztJQUVBLFNBQVMsOEJBQThCO1FBQ3JDLHlDQUF5QztRQUN6QyxnREFBZ0Q7UUFDaEQsT0FBTyxRQUFRLDhCQUE4QixDQUMzQyxRQUFRLG9CQUFvQixDQUMxQixRQUFRLDhCQUE4QixDQUNwQyxRQUFRLG9CQUFvQixDQUMxQixRQUFRLGdCQUFnQixDQUFDLFlBQ3pCLFdBQ0E7WUFBQyxRQUFRLG1CQUFtQixDQUFDO1NBQU8sR0FFdEMsUUFBUSxnQkFBZ0IsQ0FBQyxtQkFFM0IsV0FDQTtZQUFDLFFBQVEsZ0JBQWdCLENBQUM7U0FBYyxHQUUxQyxRQUFRLGdCQUFnQixDQUFDO0lBRTdCO0lBRUEsU0FBUywrQkFBK0I7UUFDdEMseUNBQXlDO1FBQ3pDLDRCQUE0QjtRQUM1QixPQUFPLFFBQVEsNkJBQTZCLENBQUMsUUFBUSxzQkFBc0IsQ0FDekUsUUFBUSw4QkFBOEIsQ0FDcEMsUUFBUSxnQkFBZ0IsQ0FBQyxZQUN6QixRQUFRLGdCQUFnQixDQUFDLFVBRTNCLFFBQVEsV0FBVyxDQUFDLEdBQUcsVUFBVSxDQUFDLHVCQUF1QixHQUN6RCxRQUFRLGdCQUFnQixDQUFDO0lBRTdCO0FBQ0YsRUFBRSJ9